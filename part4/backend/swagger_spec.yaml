openapi: 3.0.2
info:
  title: Holberton RPG Portfolio API
  version: "1.0.0"
  description: |
    RESTful API for the Holberton RPG Portfolio project.

    Manage players, quests, and skills as if you were in an RPG world â€”
    earn XP, unlock new abilities, and level up your coding adventure!
  license:
    name: MIT License

servers:
  - url: http://127.0.0.1:5000
    description: Local development server

tags:
  - name: Auth
    description: Authentication and token management
  - name: Players
    description: Player creation and management (admin for creation)
  - name: Quests
    description: Quest management (admin only for write operations)
  - name: Skills
    description: Skill management (admin only for write operations)
  - name: Progress
    description: Player progression overview

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Player:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Thomas Roncin" }
        class_name: { type: string, example: "Backend Wizard" }
        level: { type: integer, example: 5 }
        xp: { type: integer, example: 450 }
        is_admin: { type: boolean, example: false }

    Quest:
      type: object
      properties:
        id: { type: integer, example: 3 }
        title: { type: string, example: "Tame the Python Dragon" }
        xp: { type: integer, example: 120 }
        summary:
          { type: string, example: "Build a complete Flask REST API project." }

    Skill:
      type: object
      properties:
        id: { type: integer, example: 5 }
        name: { type: string, example: "Flask Wizardry" }
        level: { type: integer, example: 4 }

paths:
  # =====================================================
  # AUTH
  # =====================================================
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new player
      description: Create a new user account in the RPG system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, password, class_name]
              properties:
                name: { type: string, example: "Thomas" }
                password: { type: string, example: "thomas123" }
                class_name: { type: string, example: "Apprentice Mage" }
      responses:
        "201": { description: User successfully registered }
        "400": { description: Missing fields or name already exists }

  /auth/login:
    post:
      tags: [Auth]
      summary: Log in and receive JWT tokens
      description: Authenticate an existing player and obtain access and refresh tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, password]
              properties:
                name: { type: string, example: "Thomas Roncin" }
                password: { type: string, example: "thomas123" }
      responses:
        "200":
          description: Successful authentication
          content:
            application/json:
              example:
                success: true
                access_token: "<JWT_ACCESS_TOKEN>"
                refresh_token: "<JWT_REFRESH_TOKEN>"
                user:
                  id: 2
                  name: "Thomas Roncin"
                  class_name: "Backend Wizard"
                  is_admin: false
        "401": { description: Invalid credentials }

  /auth/me:
    get:
      tags: [Auth]
      summary: Retrieve current authenticated user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              example:
                success: true
                data:
                  id: 2
                  name: "Thomas Roncin"
                  class_name: "Backend Wizard"
                  level: 5
                  xp: 450
                  is_admin: false
        "401": { description: Unauthorized }

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh JWT access token
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Token successfully refreshed
          content:
            application/json:
              example:
                success: true
                access_token: "<NEW_ACCESS_TOKEN>"
        "401": { description: Invalid or expired token }

  # =====================================================
  # PLAYERS
  # =====================================================
  /api/players:
    get:
      tags: [Players]
      summary: Get all players
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of all players
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Player" }

    post:
      tags: [Players]
      summary: Create a new player (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, password, class_name]
              properties:
                name: { type: string, example: "New Adventurer" }
                password: { type: string, example: "newpass123" }
                class_name: { type: string, example: "Frontend Knight" }
                level: { type: integer, example: 1 }
                xp: { type: integer, example: 0 }
                is_admin: { type: boolean, example: false }
      responses:
        "201":
          description: Player successfully created
          content:
            application/json:
              example:
                success: true
                data:
                  id: 4
                  message: "Player created successfully"
        "403": { description: Admin privileges required }

  /api/players/{id}:
    get:
      tags: [Players]
      summary: Get a player by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Player data retrieved }
        "404": { description: Player not found }

    put:
      tags: [Players]
      summary: Update player (self or admin)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Player" }
      responses:
        "200": { description: Player updated }
        "403": { description: Unauthorized }

    delete:
      tags: [Players]
      summary: Delete player (self or admin)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Player deleted }
        "403": { description: Unauthorized }

  # =====================================================
  # QUESTS
  # =====================================================
  /api/quests:
    get:
      tags: [Quests]
      summary: Get all quests
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of quests
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Quest" }

    post:
      tags: [Quests]
      summary: Create a new quest (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Quest" }
      responses:
        "201": { description: Quest created successfully }
        "403": { description: Admin privileges required }

  /api/quests/{id}:
    put:
      tags: [Quests]
      summary: Update quest (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Quest" }
      responses:
        "200": { description: Quest updated }
        "403": { description: Unauthorized }

    delete:
      tags: [Quests]
      summary: Delete quest (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Quest deleted }
        "403": { description: Unauthorized }

  # =====================================================
  # SKILLS
  # =====================================================
  /api/skills:
    get:
      tags: [Skills]
      summary: Get all skills
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of skills
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Skill" }

    post:
      tags: [Skills]
      summary: Create a new skill (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Skill" }
      responses:
        "201": { description: Skill created successfully }
        "403": { description: Unauthorized }

  /api/skills/{id}:
    put:
      tags: [Skills]
      summary: Update a skill (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Skill" }
      responses:
        "200": { description: Skill updated }
        "403": { description: Unauthorized }

    delete:
      tags: [Skills]
      summary: Delete a skill (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Skill deleted }
        "403": { description: Unauthorized }

  # =====================================================
  # PROGRESS
  # =====================================================
  /api/progress/{player_id}:
    get:
      tags: [Progress]
      summary: Get player progress
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: player_id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Player progression retrieved
          content:
            application/json:
              example:
                success: true
                data:
                  player_name: "Thomas Roncin"
                  total_quests_completed: 5
                  total_xp_gained: 500
                  level: 3
        "404": { description: Player not found }
